<launch>
  <arg name="prefix" default="" />
  <arg name="no_static_map" default="true"/>
  <arg name="base_global_planner" default="navfn/NavfnROS"/> -->
  <!-- <arg name="base_global_planner" default="nav_core_adapter::GlobalPlannerAdapter"/> -->
  <arg name="base_local_planner" default="nav_core_adapter::LocalPlannerAdapter"/>
  <!--<node name="cmd_vel_manipulator" pkg="locomove_base" type="oscillation_handler.py" output="screen"></node>-->
  <node name="locomove_base" pkg="locomove_base" type="move_base" output="screen" launch-prefix="$(arg prefix)">
  <param name="global_costmap/obstacles_laser/laser/inf_is_valid" value="true"/>
    <param name="base_global_planner" value="$(arg base_global_planner)"/>
    <param name="base_local_planner" value="$(arg base_local_planner)"/>
    <rosparam file="$(find locomotor)/config/planner.yaml" command="load"/>

    <!-- observation sources located in costmap_common.yaml -->
    <rosparam file="$(find locomotor)/config/costmap_common.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find locomotor)/config/costmap_common.yaml" command="load" ns="local_costmap" />

    <!-- local costmap, needs size -->
    <rosparam file="$(find locomotor)/config/costmap_local.yaml" command="load" ns="local_costmap" />
    <param name="local_costmap/width" value="10.0"/>
    <param name="local_costmap/height" value="10.0"/>

    <!-- static global costmap, static map provides size -->
    <rosparam file="$(find locomotor)/config/costmap_global_static.yaml" command="load" ns="global_costmap" unless="$(arg no_static_map)"/>

    <!-- global costmap with laser, for odom_navigation_demo -->
    <rosparam file="$(find locomotor)/config/costmap_global_laser.yaml" command="load" ns="global_costmap" if="$(arg no_static_map)"/>
    <param name="global_costmap/width" value="40.0" if="$(arg no_static_map)"/>
    <param name="global_costmap/height" value="40.0" if="$(arg no_static_map)"/>
    <param name="global_costmap/update_frequency" value="8.0"/>
    <param name="global_costmap/resolution" value="0.15"/>
    <!--<param name="global_costmap/obstacles_laser/laser/inf_is_valid" value="false"/>--> <!-- Obstacles are not cleared unless those areas are seen from the sensor (LaserScan, /scan) again, use if 360 degree lidar data is possible. Otherwise rover might not find a path since it cannot update the places behind itself. -->

  <remap from="/cmd_vel" to="/nav_vel" />
  </node>
  <node name="oscillation_handler" pkg="locomove_base" type="oscillation_handler_approach.py" output="screen"/>
  <node name="turner" pkg="locomove_base" type="turner.py" output="screen"/>
  <!--<node name="clipper" pkg="locomove_base" type="clip.py" output="screen"/>-->
</launch>
